/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CountryService } from "../country.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CountryCreateInput } from "./CountryCreateInput";
import { CountryWhereInput } from "./CountryWhereInput";
import { CountryWhereUniqueInput } from "./CountryWhereUniqueInput";
import { CountryFindManyArgs } from "./CountryFindManyArgs";
import { CountryUpdateInput } from "./CountryUpdateInput";
import { Country } from "./Country";
import { CityFindManyArgs } from "../../city/base/CityFindManyArgs";
import { City } from "../../city/base/City";
import { CityWhereUniqueInput } from "../../city/base/CityWhereUniqueInput";
import { StateFindManyArgs } from "../../state/base/StateFindManyArgs";
import { State } from "../../state/base/State";
import { StateWhereUniqueInput } from "../../state/base/StateWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CountryControllerBase {
  constructor(
    protected readonly service: CountryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Country })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: CountryCreateInput): Promise<Country> {
    return await this.service.create({
      data: data,
      select: {
        code: true,
        createdAt: true,
        createdBy: true,
        currencyCode: true,
        id: true,
        isActive: true,
        name: true,
        phoneCallingCode: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Country] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(CountryFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Country[]> {
    const args = plainToClass(CountryFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        code: true,
        createdAt: true,
        createdBy: true,
        currencyCode: true,
        id: true,
        isActive: true,
        name: true,
        phoneCallingCode: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<Country | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        code: true,
        createdAt: true,
        createdBy: true,
        currencyCode: true,
        id: true,
        isActive: true,
        name: true,
        phoneCallingCode: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() data: CountryUpdateInput
  ): Promise<Country | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          createdBy: true,
          currencyCode: true,
          id: true,
          isActive: true,
          name: true,
          phoneCallingCode: true,
          updatedAt: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<Country | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          code: true,
          createdAt: true,
          createdBy: true,
          currencyCode: true,
          id: true,
          isActive: true,
          name: true,
          phoneCallingCode: true,
          updatedAt: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "City",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/cities")
  @ApiNestedQuery(CityFindManyArgs)
  async findManyCities(
    @common.Req() request: Request,
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<City[]> {
    const query = plainToClass(CityFindManyArgs, request.query);
    const results = await this.service.findCities(params.id, {
      ...query,
      select: {
        code: true,

        country: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        latitude: true,
        name: true,

        state: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/cities")
  async connectCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/cities")
  async updateCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/cities")
  async disconnectCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/states")
  @ApiNestedQuery(StateFindManyArgs)
  async findManyStates(
    @common.Req() request: Request,
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<State[]> {
    const query = plainToClass(StateFindManyArgs, request.query);
    const results = await this.service.findStates(params.id, {
      ...query,
      select: {
        code: true,

        country: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        createdBy: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/states")
  async connectStates(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/states")
  async updateStates(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/states")
  async disconnectStates(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  async findManyUsers(
    @common.Req() request: Request,
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        affiliate: true,
        avatar: true,

        city: {
          select: {
            id: true,
          },
        },

        country: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        currency: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        howDidYouHear: true,
        id: true,
        language: true,
        lastName: true,
        phoneNumber: true,
        roles: true,

        state: {
          select: {
            id: true,
          },
        },

        timezone: true,
        title: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/users")
  async connectUsers(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/users")
  async updateUsers(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/users")
  async disconnectUsers(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
