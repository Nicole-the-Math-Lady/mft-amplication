/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStateArgs } from "./CreateStateArgs";
import { UpdateStateArgs } from "./UpdateStateArgs";
import { DeleteStateArgs } from "./DeleteStateArgs";
import { StateFindManyArgs } from "./StateFindManyArgs";
import { StateFindUniqueArgs } from "./StateFindUniqueArgs";
import { State } from "./State";
import { CityFindManyArgs } from "../../city/base/CityFindManyArgs";
import { City } from "../../city/base/City";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Country } from "../../country/base/Country";
import { StateService } from "../state.service";

@graphql.Resolver(() => State)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class StateResolverBase {
  constructor(
    protected readonly service: StateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  async _statesMeta(
    @graphql.Args() args: StateFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [State])
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  async states(@graphql.Args() args: StateFindManyArgs): Promise<State[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => State, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "own",
  })
  async state(
    @graphql.Args() args: StateFindUniqueArgs
  ): Promise<State | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "create",
    possession: "any",
  })
  async createState(@graphql.Args() args: CreateStateArgs): Promise<State> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async updateState(
    @graphql.Args() args: UpdateStateArgs
  ): Promise<State | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "delete",
    possession: "any",
  })
  async deleteState(
    @graphql.Args() args: DeleteStateArgs
  ): Promise<State | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [City])
  @nestAccessControl.UseRoles({
    resource: "City",
    action: "read",
    possession: "any",
  })
  async cities(
    @graphql.Parent() parent: State,
    @graphql.Args() args: CityFindManyArgs
  ): Promise<City[]> {
    const results = await this.service.findCities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(
    @graphql.Parent() parent: State,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async country(@graphql.Parent() parent: State): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
